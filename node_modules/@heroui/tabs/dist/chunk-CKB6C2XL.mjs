"use client";
import {
  tab_panel_default
} from "./chunk-ZXXSKA4X.mjs";
import {
  tab_default
} from "./chunk-YH5X7GEZ.mjs";
import {
  useTabs
} from "./chunk-DIYF44QK.mjs";

// src/tabs.tsx
import { useRef, useMemo } from "react";
import { forwardRef } from "@heroui/system";
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
var Tabs = forwardRef(function Tabs2(props, ref) {
  const {
    Component,
    values,
    state,
    domRef,
    destroyInactiveTabPanel,
    getBaseProps,
    getTabListProps,
    getWrapperProps,
    getTabCursorProps
  } = useTabs({
    ...props,
    ref
  });
  const tabsProps = {
    state,
    listRef: values.listRef,
    slots: values.slots,
    classNames: values.classNames,
    isDisabled: values.isDisabled,
    shouldSelectOnPressUp: values.shouldSelectOnPressUp
  };
  const tabs = [...state.collection].map((item) => /* @__PURE__ */ jsx(tab_default, { item, ...tabsProps, ...item.props }, item.key));
  const selectedItem = state.selectedItem;
  const selectedKey = selectedItem == null ? void 0 : selectedItem.key;
  const prevSelectedKey = useRef(void 0);
  const prevVariant = useRef(props == null ? void 0 : props.variant);
  const variant = props == null ? void 0 : props.variant;
  const isVertical = props == null ? void 0 : props.isVertical;
  const getCursorStyles = (tabRect, relativeLeft, relativeTop) => {
    const baseStyles = {
      left: `${relativeLeft}px`,
      width: `${tabRect.width}px`
    };
    if (variant === "underlined") {
      return {
        left: `${relativeLeft + tabRect.width * 0.1}px`,
        top: `${relativeTop + tabRect.height - 2}px`,
        width: `${tabRect.width * 0.8}px`,
        height: ""
      };
    }
    return {
      ...baseStyles,
      top: `${relativeTop}px`,
      height: `${tabRect.height}px`
    };
  };
  const updateCursorPosition = (node, selectedTab) => {
    const tabRect = {
      width: selectedTab.offsetWidth,
      height: selectedTab.offsetHeight
    };
    const styles = getCursorStyles(tabRect, selectedTab.offsetLeft, selectedTab.offsetTop);
    node.style.left = styles.left;
    node.style.top = styles.top;
    node.style.width = styles.width;
    node.style.height = styles.height;
  };
  const handleCursorRef = (node) => {
    var _a;
    if (!node) return;
    const selectedTab = (_a = domRef.current) == null ? void 0 : _a.querySelector(`[data-key="${selectedKey}"]`);
    if (!selectedTab || !domRef.current) return;
    const shouldDisableTransition = prevSelectedKey.current === void 0 || prevVariant.current !== variant;
    node.style.transition = shouldDisableTransition ? "none" : "";
    prevSelectedKey.current = selectedKey;
    prevVariant.current = variant;
    updateCursorPosition(node, selectedTab);
  };
  const renderTabs = useMemo(
    () => /* @__PURE__ */ jsxs(Fragment, { children: [
      /* @__PURE__ */ jsx("div", { ...getBaseProps(), children: /* @__PURE__ */ jsxs(Component, { ...getTabListProps(), children: [
        !values.disableAnimation && !values.disableCursorAnimation && selectedKey != null && /* @__PURE__ */ jsx("span", { ...getTabCursorProps(), ref: handleCursorRef }),
        tabs
      ] }) }),
      [...state.collection].map((item) => {
        return /* @__PURE__ */ jsx(
          tab_panel_default,
          {
            classNames: values.classNames,
            destroyInactiveTabPanel,
            slots: values.slots,
            state: values.state,
            tabKey: item.key
          },
          item.key
        );
      })
    ] }),
    [
      Component,
      getBaseProps,
      getTabListProps,
      getTabCursorProps,
      tabs,
      selectedKey,
      state.collection,
      values.disableAnimation,
      values.disableCursorAnimation,
      values.classNames,
      values.slots,
      values.state,
      destroyInactiveTabPanel,
      domRef,
      variant,
      isVertical
    ]
  );
  if ("placement" in props || "isVertical" in props) {
    return /* @__PURE__ */ jsx("div", { ...getWrapperProps(), children: renderTabs });
  }
  return renderTabs;
});
var tabs_default = Tabs;

export {
  tabs_default
};
